(()=>{var e={738:(e,t,n)=>{const r=n(147),o=n(17),s=n(37),i=n(113),a=n(968).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function p(e){console.log(`[dotenv@${a}][DEBUG] ${e}`)}function l(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function d(e,t){let n;try{n=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code)throw new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development");throw e}const r=n.password;if(!r)throw new Error("INVALID_DOTENV_KEY: Missing key part");const o=n.searchParams.get("environment");if(!o)throw new Error("INVALID_DOTENV_KEY: Missing environment part");const s=`DOTENV_VAULT_${o.toUpperCase()}`,i=e.parsed[s];if(!i)throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);return{ciphertext:i,key:r}}function u(e){let t=o.resolve(process.cwd(),".env");return e&&e.path&&e.path.length>0&&(t=e.path),t.endsWith(".vault")?t:`${t}.vault`}const f={configDotenv:function(e){let t=o.resolve(process.cwd(),".env"),n="utf8";const i=Boolean(e&&e.debug);var a;e&&(null!=e.path&&(t="~"===(a=e.path)[0]?o.join(s.homedir(),a.slice(1)):a),null!=e.encoding&&(n=e.encoding));try{const o=f.parse(r.readFileSync(t,{encoding:n}));let s=process.env;return e&&null!=e.processEnv&&(s=e.processEnv),f.populate(s,o,e),{parsed:o}}catch(e){return i&&p(`Failed to load ${t} ${e.message}`),{error:e}}},_configVault:function(e){console.log(`[dotenv@${a}][INFO] Loading env from encrypted .env.vault`);const t=f._parseVault(e);let n=process.env;return e&&null!=e.processEnv&&(n=e.processEnv),f.populate(n,t,e),{parsed:t}},_parseVault:function(e){const t=u(e),n=f.configDotenv({path:t});if(!n.parsed)throw new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);const r=l(e).split(","),o=r.length;let s;for(let e=0;e<o;e++)try{const t=d(n,r[e].trim());s=f.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=o)throw t}return f.parse(s)},config:function(e){const t=u(e);return 0===l(e).length?f.configDotenv(e):r.existsSync(t)?f._configVault(e):(n=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${a}][WARN] ${n}`),f.configDotenv(e));var n},decrypt:function(e,t){const n=Buffer.from(t.slice(-64),"hex");let r=Buffer.from(e,"base64");const o=r.slice(0,12),s=r.slice(-16);r=r.slice(12,-16);try{const e=i.createDecipheriv("aes-256-gcm",n,o);return e.setAuthTag(s),`${e.update(r)}${e.final()}`}catch(e){const t=e instanceof RangeError,n="Invalid key length"===e.message,r="Unsupported state or unable to authenticate data"===e.message;if(t||n)throw new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");if(r)throw new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw console.error("Error: ",e.code),console.error("Error: ",e.message),e}},parse:function(e){const t={};let n,r=e.toString();for(r=r.replace(/\r\n?/gm,"\n");null!=(n=c.exec(r));){const e=n[1];let r=n[2]||"";r=r.trim();const o=r[0];r=r.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===o&&(r=r.replace(/\\n/g,"\n"),r=r.replace(/\\r/g,"\r")),t[e]=r}return t},populate:function(e,t,n={}){const r=Boolean(n&&n.debug),o=Boolean(n&&n.override);if("object"!=typeof t)throw new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");for(const n of Object.keys(t))Object.prototype.hasOwnProperty.call(e,n)?(!0===o&&(e[n]=t[n]),r&&p(!0===o?`"${n}" is already defined and WAS overwritten`:`"${n}" is already defined and was NOT overwritten`)):e[n]=t[n]}};e.exports.configDotenv=f.configDotenv,e.exports._configVault=f._configVault,e.exports._parseVault=f._parseVault,e.exports.config=f.config,e.exports.decrypt=f.decrypt,e.exports.parse=f.parse,e.exports.populate=f.populate,e.exports=f},965:(e,t,n)=>{"use strict";e.exports=n.p+"91840fcaaa20923760be.json"},113:e=>{"use strict";e.exports=require("crypto")},147:e=>{"use strict";e.exports=require("fs")},37:e=>{"use strict";e.exports=require("os")},17:e=>{"use strict";e.exports=require("path")},968:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.3.1","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://github.com/motdotla/dotenv?sponsor=1","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={exports:{}};return e[r](s,s.exports,n),s.exports}n.m=e,n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.p="",n.b=require("url").pathToFileURL(__filename),(()=>{"use strict";const e=require("http"),t=["username","age","hobbies"];function r(e){return/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(e)}const o=e=>Array.isArray(e)&&e.every((e=>"string"==typeof e));var s=n(147);const i=new URL(n(965),n.b).pathname,a=new URL(n(965),n.b).pathname,c=e=>{try{return s.writeFileSync(a,JSON.stringify(e,null,2),"utf8")}catch(e){throw new Error("Error writing data to file")}};var p=n(113);const l=(()=>{try{const e=s.readFileSync(i,"utf8");return JSON.parse(e)}catch(e){throw new Error("Error reading data from file")}})(),d={"/api/users":{GET:(e,t)=>{l?(t.writeHead(200,{"Content-Type":"application/json"}),t.end(JSON.stringify(l))):(t.writeHead(500,{"Content-Type":"text/plain"}),t.end("Something went wrong"))},POST:(e,t)=>{let n="";e.on("data",(e=>{n+=e.toString()})),e.on("end",(()=>{const e=JSON.parse(n);if(!(e=>!("object"!=typeof e||null===e||"string"!=typeof e.username||"number"!=typeof e.age||!o(e.hobbies)))(e))return t.writeHead(400,{"Content-Type":"application/json"}),void t.end(JSON.stringify({message:"Missing required fields"}));const r={id:p.randomUUID(),...e};l.push(r),c(l),t.writeHead(201,{"Content-Type":"application/json"}),t.end(JSON.stringify(r))}))}},"/api/users/":{GET:(e,t)=>{const n=e.url.split("/"),o=n[n.length-1];if(!r(o))return t.writeHead(400,{"Content-Type":"text/plain"}),void t.end("Invalid userId");const s=l.find((e=>e.id===o));s?(t.writeHead(200,{"Content-Type":"application/json"}),t.end(JSON.stringify(s))):(t.writeHead(404,{"Content-Type":"text/plain"}),t.end("User does not exist"))},PUT:(e,n)=>{const s=e.url.split("/"),i=s[s.length-1];if(!r(i))return n.writeHead(400,{"Content-Type":"text/plain"}),void n.end("Invalid userId");const a=l.find((e=>e.id===i));if(a){let r="";e.on("data",(e=>{r+=e.toString()})),e.on("end",(()=>{const e=JSON.parse(r);if((e=>"object"==typeof e&&null!==e&&Object.keys(e).every((n=>{if(t.includes(n)){if("hobbies"===n)return o(e.hobbies);if("age"===n)return"number"==typeof e.age;if("username"===n)return"string"==typeof e.username}})))(e)){for(const t in e)a[t]=e[t];c(l),n.writeHead(200,{"Content-Type":"application/json"}),n.end(JSON.stringify(a))}else n.writeHead(400,{"Content-Type":"text/plain"}),n.end("invalid user fields")}))}else n.writeHead(404,{"Content-Type":"text/plain"}),n.end("User does not exist")},DELETE:(e,t)=>{const n=e.url.split("/"),o=n[n.length-1];if(!r(o))return t.writeHead(400,{"Content-Type":"text/plain"}),void t.end("Invalid userId");if(l.find((e=>e.id===o))){const e=l.filter((e=>e.id!==o));c(e),t.writeHead(204,{"Content-Type":"application/json"}),t.end("User has been deleted")}else t.writeHead(404,{"Content-Type":"text/plain"}),t.end("User does not exist")}}};n(738).config();const u=(0,e.createServer)(((e,t)=>{const n=e.url.split("/");let r=d[e.url];e.url.includes("/api/users/")&&4==n.length&&(r=d["/api/users/"]);try{r&&r[e.method]?r[e.method](e,t):(t.writeHead(404,{"Content-Type":"text/plain"}),t.end("Not Found"))}catch{t.writeHead(500,{"Content-Type":"text/plain"}),t.end(JSON.stringify({message:"Internal Server Error"}))}})),f=process.env.PORT||3e3;console.log(process.env.PORT),u.listen(f,(()=>{console.log(`Server is running on port ${f}`)}))})()})();